import type { ApiContext } from "../context.ts";
import type { OAuthFlowsObject } from "./oauth-flow.ts";
import type { ApiParser } from "./parser.ts";

/**
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header,
 * a cookie parameter or as a query parameter), mutual TLS (use of a client
 * certificate), OAuth2's common flows (implicit, password, client
 * credentials and authorization code) as defined in [RFC6749](
 * https://www.rfc-editor.org/rfc/rfc6749), and [OpenID-Connect-Core](
 * https://openid.net/specs/openid-connect-core-1_0.html). Please note
 * that as of 2020, the implicit flow is about to be deprecated by
 * [OAuth 2.0 Security Best Current Practice](
 * https://tools.ietf.org/html/draft-ietf-oauth-security-topics).
 * Recommended for most use cases is Authorization Code Grant flow with PKCE.
 *
 * @see [OpenAPI Specification ยง4.8.27](https://spec.openapis.org/oas/v3.1.1.html#security-scheme-object-0)
 */
export interface SecuritySchemeObject {
  /**
   * The type of the security scheme. Valid values are `"apiKey"`, `"http"`,
   * `"mutualTLS"`, `"oauth2"`, `"openIdConnect"`.
   */
  readonly type?: "apiKey" | "http" | "mutualTLS" | "oauth2" | "openIdConnect";

  /**
   * A description for security scheme. [CommonMark](
   * https://spec.commonmark.org/) syntax _MAY_ be used for rich text
   * representation.
   */
  readonly description?: string;

  /**
   * The name of the header, query or cookie parameter to be used.
   */
  readonly name?: string;

  /**
   * The location of the API key. Valid values are `"query"`, `"header"`,
   * or `"cookie"`.
   */
  readonly in?: "query" | "header" | "cookie";

  /**
   * The name of the HTTP Authentication scheme to be used in the
   * Authorization header as defined in [RFC7235](
   * https://httpwg.org/specs/rfc7235.html) [Section 5.1](
   * https://datatracker.ietf.org/doc/html/rfc7235#section-5.1).
   * The values used _SHOULD_ be registered in the
   * [IANA Authentication Scheme registry](
   * https://spec.openapis.org/oas/v3.1.1.html#bib-iana-http-authschemes).
   * The value is case-insensitive, as defined in [RFC7235](
   * https://httpwg.org/specs/rfc7235.html) [Section 2.1](
   * https://datatracker.ietf.org/doc/html/rfc7235#section-2.1).
   */
  readonly scheme?: string;

  /**
   * A hint to the client to identify how the bearer token is formatted.
   * Bearer tokens are usually generated by an authorization server,
   * so this information is primarily for documentation purposes.
   */
  readonly bearerFormat?: string;

  /**
   * An object containing configuration information for the flow types
   * supported.
   */
  readonly flows?: OAuthFlowsObject;

  /**
   * [Well-known URL](
   * https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig)
   * to discover the [OpenID-Connect-Discovery](
   * https://openid.net/specs/openid-connect-discovery-1_0.html)
   * [provider metadata](
   * https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
   */
  readonly openIdConnectUrl?: string;
}

/** @internal */
export function parseSecuritySchemeObject(
  context: ApiContext,
  parser: ApiParser,
  node: unknown,
): void {
  parser.parseObject(
    context,
    parser,
    node,
    "Security Scheme Object",
    parseSecuritySchemeField,
  );
}

/** @internal */
function parseSecuritySchemeField(
  context: ApiContext,
  parser: ApiParser,
  value: unknown,
  key: string,
): void {
  switch (key) {
    case "type":
      parser.parseString(context, parser, value, key);
      break;
    case "description":
      parser.parseString(context, parser, value, key);
      break;
    case "name":
      parser.parseString(context, parser, value, key);
      break;
    case "in":
      parser.parseString(context, parser, value, key);
      break;
    case "scheme":
      parser.parseString(context, parser, value, key);
      break;
    case "bearerFormat":
      parser.parseString(context, parser, value, key);
      break;
    case "flows":
      parser.parseOAuthFlowsObject(context, parser, value);
      break;
    case "openIdConnectUrl":
      parser.parseString(context, parser, value, key);
      break;
    default:
      parser.parseExtension(context, "Security Scheme Object", key, value);
  }
}
